<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Calculator</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Arial', sans-serif;
    }
    
    body {
      background-color: #f5f5f5;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
    }
    
    .calculator {
      background-color: #fff;
      border-radius: 16px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
      width: 320px;
      overflow: hidden;
    }
    
    .display {
      background-color: #f8f9fa;
      padding: 24px;
      text-align: right;
      border-bottom: 1px solid #eee;
    }
    
    .previous-operand {
      color: #6c757d;
      font-size: 16px;
      min-height: 24px;
      margin-bottom: 8px;
    }
    
    .current-operand {
      color: #212529;
      font-size: 36px;
      font-weight: 500;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .buttons {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 1px;
      background-color: #e9ecef;
    }
    
    button {
      border: none;
      outline: none;
      background-color: white;
      padding: 20px;
      font-size: 18px;
      cursor: pointer;
      transition: background-color 0.2s;
    }
    
    button:hover {
      background-color: #f8f9fa;
    }
    
    button:active {
      background-color: #e9ecef;
    }
    
    .operator {
      color: #0d6efd;
      font-weight: bold;
    }
    
    .equals {
      background-color: #0d6efd;
      color: white;
      grid-column: span 2;
    }
    
    .equals:hover {
      background-color: #0b5ed7;
    }
    
    .equals:active {
      background-color: #0a58ca;
    }
    
    .clear, .delete {
      color: #dc3545;
    }
    
    .calculator-header {
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 16px;
      background-color: #0d6efd;
      color: white;
    }
    
    .calculator-title {
      font-size: 20px;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <div class="calculator">
    <div class="calculator-header">
      <div class="calculator-title">Calculator</div>
    </div>
    <div class="display">
      <div class="previous-operand" id="previous-operand"></div>
      <div class="current-operand" id="current-operand">0</div>
    </div>
    <div class="buttons">
      <button class="clear" onclick="clearAll()">AC</button>
      <button class="delete" onclick="deleteNumber()">DEL</button>
      <button class="operator" onclick="appendOperator('%')">%</button>
      <button class="operator" onclick="appendOperator('÷')">÷</button>
      
      <button onclick="appendNumber('7')">7</button>
      <button onclick="appendNumber('8')">8</button>
      <button onclick="appendNumber('9')">9</button>
      <button class="operator" onclick="appendOperator('×')">×</button>
      
      <button onclick="appendNumber('4')">4</button>
      <button onclick="appendNumber('5')">5</button>
      <button onclick="appendNumber('6')">6</button>
      <button class="operator" onclick="appendOperator('-')">-</button>
      
      <button onclick="appendNumber('1')">1</button>
      <button onclick="appendNumber('2')">2</button>
      <button onclick="appendNumber('3')">3</button>
      <button class="operator" onclick="appendOperator('+')">+</button>
      
      <button onclick="appendNumber('0')">0</button>
      <button onclick="appendDecimal()">.</button>
      <button class="equals" onclick="calculate()">=</button>
    </div>
  </div>

  <script>
    // Calculator state
    let currentOperand = '0';
    let previousOperand = '';
    let operation = undefined;
    let shouldResetScreen = false;

    // DOM elements
    const currentOperandElement = document.getElementById('current-operand');
    const previousOperandElement = document.getElementById('previous-operand');

    // Update the display
    function updateDisplay() {
      currentOperandElement.textContent = formatDisplayNumber(currentOperand);
      
      if (operation != null) {
        previousOperandElement.textContent = `${formatDisplayNumber(previousOperand)} ${operation}`;
      } else {
        previousOperandElement.textContent = '';
      }
    }

    // Format numbers for display
    function formatDisplayNumber(number) {
      const stringNumber = number.toString();
      const integerDigits = parseFloat(stringNumber.split('.')[0]);
      const decimalDigits = stringNumber.split('.')[1];
      
      let integerDisplay;
      
      if (isNaN(integerDigits)) {
        integerDisplay = '';
      } else {
        integerDisplay = integerDigits.toLocaleString('en', { maximumFractionDigits: 0 });
      }
      
      if (decimalDigits != null) {
        return `${integerDisplay}.${decimalDigits}`;
      } else {
        return integerDisplay;
      }
    }

    // Append a number to the display
    function appendNumber(number) {
      if (shouldResetScreen) {
        currentOperand = '';
        shouldResetScreen = false;
      }
      
      if (number === '0' && currentOperand === '0') return;
      if (currentOperand === '0' && number !== '.') currentOperand = '';
      
      // Limit the length to prevent overflow
      if (currentOperand.length > 12) return;
      
      currentOperand += number;
      updateDisplay();
    }

    // Append decimal point
    function appendDecimal() {
      if (shouldResetScreen) {
        currentOperand = '0';
        shouldResetScreen = false;
      }
      
      if (currentOperand.includes('.')) return;
      
      currentOperand += '.';
      updateDisplay();
    }

    // Handle operators
    function appendOperator(op) {
      if (currentOperand === '') return;
      
      if (previousOperand !== '') {
        calculate();
      }
      
      operation = op;
      previousOperand = currentOperand;
      shouldResetScreen = true;
      updateDisplay();
    }

    // Calculate the result
    function calculate() {
      let computation;
      const prev = parseFloat(previousOperand);
      const current = parseFloat(currentOperand);
      
      if (isNaN(prev) || isNaN(current)) return;
      
      switch (operation) {
        case '+':
          computation = prev + current;
          break;
        case '-':
          computation = prev - current;
          break;
        case '×':
          computation = prev * current;
          break;
        case '÷':
          if (current === 0) {
            clearAll();
            currentOperand = 'Error';
            updateDisplay();
            return;
          }
          computation = prev / current;
          break;
        case '%':
          computation = prev % current;
          break;
        default:
          return;
      }
      
      // Handle large numbers and round to avoid floating point issues
      computation = Math.round(computation * 1000000000) / 1000000000;
      
      currentOperand = computation.toString();
      operation = undefined;
      previousOperand = '';
      shouldResetScreen = true;
      updateDisplay();
    }

    // Clear all values
    function clearAll() {
      currentOperand = '0';
      previousOperand = '';
      operation = undefined;
      shouldResetScreen = false;
      updateDisplay();
    }

    // Delete the last digit
    function deleteNumber() {
      if (shouldResetScreen) return;
      
      if (currentOperand.length === 1) {
        currentOperand = '0';
      } else {
        currentOperand = currentOperand.slice(0, -1);
      }
      
      updateDisplay();
    }

    // Initialize display
    updateDisplay();

    // Keyboard support
    document.addEventListener('keydown', function(event) {
      if (event.key >= '0' && event.key <= '9') {
        appendNumber(event.key);
      } else if (event.key === '.') {
        appendDecimal();
      } else if (event.key === '+' || event.key === '-') {
        appendOperator(event.key);
      } else if (event.key === '*') {
        appendOperator('×');
      } else if (event.key === '/') {
        event.preventDefault();
        appendOperator('÷');
      } else if (event.key === '%') {
        appendOperator('%');
      } else if (event.key === 'Enter' || event.key === '=') {
        event.preventDefault();
        calculate();
      } else if (event.key === 'Backspace') {
        deleteNumber();
      } else if (event.key === 'Escape') {
        clearAll();
      }
    });
  </script>
</body>
</html>
